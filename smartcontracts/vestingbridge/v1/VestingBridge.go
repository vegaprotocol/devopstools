// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package VestingBridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VestingBridgeMetaData contains all meta data concerning the VestingBridge contract.
var VestingBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_v1_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_v2_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"old_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"new_addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_controller\",\"type\":\"address\"}],\"name\":\"Controller_Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issuer_Permitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"Issuer_Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"Stake_Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"Stake_Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"Stake_Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tranche_Balance_Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tranche_Balance_Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"Tranche_Created\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accuracy_scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"address_migration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"assisted_withdraw_from_tranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"create_tranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"default_tranche_id\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"}],\"name\":\"get_tranche_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"}],\"name\":\"get_vested_for_tranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue_into_tranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move_into_tranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"permit_issuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitted_issuance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"remove_stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"revoke_issuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_controller\",\"type\":\"address\"}],\"name\":\"set_controller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"stake_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vega_public_key\",\"type\":\"bytes32\"}],\"name\":\"stake_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranche_count\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cliff_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_in_all_tranches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lien\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"user_total_all_tranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v1_migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche_id\",\"type\":\"uint8\"}],\"name\":\"withdraw_from_tranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526001600060146101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162003f4038038062003f40833981810160405281019062000053919062000620565b80518251146200009a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000091906200073f565b60405180910390fd5b60005b82518160ff161015620002fd5760016000848360ff1681518110620000eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156200014657600080fd5b6001806000858460ff168151811062000188577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550828160ff16815181106200021e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160076000848460ff168151811062000267577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080620002f49062000886565b9150506200009d565b5083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016200037a919062000722565b60206040518083038186803b1580156200039357600080fd5b505afa158015620003a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ce9190620006be565b8473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200041557600080fd5b505afa1580156200042a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004509190620006be565b6200045c9190620007ca565b60038190555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f587f8c3da67289e1b7fa2679aafa43e8ef08d5d8d9adfcb67cc825264c431c1360405160405180910390a25050505062000981565b60006200056762000561846200078a565b62000761565b905080838252602082019050828560208602820111156200058757600080fd5b60005b85811015620005bb5781620005a08882620005c5565b8452602084019350602083019250506001810190506200058a565b5050509392505050565b600081519050620005d6816200094d565b92915050565b600082601f830112620005ee57600080fd5b81516200060084826020860162000550565b91505092915050565b6000815190506200061a8162000967565b92915050565b600080600080608085870312156200063757600080fd5b60006200064787828801620005c5565b94505060206200065a87828801620005c5565b935050604085015167ffffffffffffffff8111156200067857600080fd5b6200068687828801620005dc565b925050606085015167ffffffffffffffff811115620006a457600080fd5b620006b287828801620005dc565b91505092959194509250565b600060208284031215620006d157600080fd5b6000620006e18482850162000609565b91505092915050565b620006f58162000805565b82525050565b60006200070a601583620007b9565b9150620007178262000924565b602082019050919050565b6000602082019050620007396000830184620006ea565b92915050565b600060208201905081810360008301526200075a81620006fb565b9050919050565b60006200076d62000780565b90506200077b828262000850565b919050565b6000604051905090565b600067ffffffffffffffff821115620007a857620007a7620008e4565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620007d78262000839565b9150620007e48362000839565b925082821015620007fa57620007f9620008b5565b5b828203905092915050565b6000620008128262000819565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6200085b8262000913565b810181811067ffffffffffffffff821117156200087d576200087c620008e4565b5b80604052505050565b6000620008938262000843565b915060ff821415620008aa57620008a9620008b5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f6172726179206c656e677468206d69736d617463680000000000000000000000600082015250565b620009588162000805565b81146200096457600080fd5b50565b620009728162000839565b81146200097e57600080fd5b50565b6135af80620009916000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063912d66ff116100f9578063dd01ba0b11610097578063eb1cbd2711610071578063eb1cbd271461052b578063ed1cac5c14610549578063eea70b4214610567578063f77c479114610583576101c4565b8063dd01ba0b146104c2578063e2de6e6d146104de578063e96842ec146104fa576101c4565b8063a7cf676e116100d3578063a7cf676e1461043a578063a8be47e414610458578063af7568dd14610488578063bc6d385d146104a6576101c4565b8063912d66ff146103e657806391b10ffa1461040257806394a4ff3f1461041e576101c4565b80633fd60603116101665780636689109311610140578063668910931461035e5780636bb7d8561461037a5780637d89651a146103aa578063903223bf146103c8576101c4565b80633fd60603146102e1578063572dd5a9146102fd57806359e7454b1461032e576101c4565b8063277817c7116101a2578063277817c71461025957806329f7de26146102755780632dc7d74c146102a55780633c48a620146102c3576101c4565b806302e8e239146101c957806315e1a382146101f9578063274abf3414610229575b600080fd5b6101e360048036038101906101de9190612bc1565b6105a1565b6040516101f091906130b4565b60405180910390f35b610213600480360381019061020e9190612b20565b6106e4565b60405161022091906130b4565b60405180910390f35b610243600480360381019061023e9190612b49565b610743565b60405161025091906130b4565b60405180910390f35b610273600480360381019061026e9190612b85565b6107a1565b005b61028f600480360381019061028a9190612bc1565b610a19565b60405161029c91906130b4565b60405180910390f35b6102ad610ccb565b6040516102ba9190612f15565b60405180910390f35b6102cb610cf5565b6040516102d891906130b4565b60405180910390f35b6102fb60048036038101906102f69190612d3f565b610cfb565b005b61031760048036038101906103129190612d16565b61103b565b6040516103259291906130cf565b60405180910390f35b61034860048036038101906103439190612b20565b61105f565b6040516103559190612f15565b60405180910390f35b61037860048036038101906103739190612cda565b611092565b005b610394600480360381019061038f9190612b20565b6111fb565b6040516103a19190612f59565b60405180910390f35b6103b261121b565b6040516103bf9190612f15565b60405180910390f35b6103d0611241565b6040516103dd91906130b4565b60405180910390f35b61040060048036038101906103fb9190612bfd565b61124a565b005b61041c60048036038101906104179190612b20565b611684565b005b61043860048036038101906104339190612b20565b611869565b005b610442611a05565b60405161044f9190612f15565b60405180910390f35b610472600480360381019061046d9190612b20565b611a2b565b60405161047f91906130b4565b60405180910390f35b610490611a43565b60405161049d91906130b4565b60405180910390f35b6104c060048036038101906104bb9190612d16565b611a4d565b005b6104dc60048036038101906104d79190612c9e565b611cfe565b005b6104f860048036038101906104f39190612bfd565b611e2d565b005b610514600480360381019061050f9190612b20565b6124ae565b6040516105229291906130cf565b60405180910390f35b6105336124d2565b60405161054091906130f8565b60405180910390f35b6105516124e5565b60405161055e91906130f8565b60405180910390f35b610581600480360381019061057c9190612c9e565b6124ea565b005b61058b612716565b6040516105989190612f15565b60405180910390f35b60008060ff168260ff161480156106025750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610617576106108361273a565b90506106de565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008360ff1660ff16815260200190815260200160002060010154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008460ff1660ff168152602001908152602001600020600001546106db9190613205565b90505b92915050565b60006106ef8261273a565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461073c9190613124565b9050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600083815260200190815260200160002054905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690613074565b60405180910390fd5b60008111610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990612fb4565b60405180910390fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90613014565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a90612ff4565b60405180910390fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fb1dde3dfc5e8df8a1ad5d278b36a91192c9106fc9ae0d1730c82455692640cd882604051610a0d91906130b4565b60405180910390a25050565b6000600860008360ff1660ff16815260200190815260200160002060000154421015610a485760009050610cc5565b600860008360ff1660ff16815260200190815260200160002060010154600860008460ff1660ff16815260200190815260200160002060000154610a8c9190613124565b421180610ab557506000600860008460ff1660ff16815260200190815260200160002060010154145b15610b8557600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008360ff1660ff16815260200190815260200160002060010154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008460ff1660ff16815260200190815260200160002060000154610b7e9190613205565b9050610cc5565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008360ff1660ff1681526020019081526020016000206001015464174876e800600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008560ff1660ff16815260200190815260200160002060000154600860008660ff1660ff16815260200190815260200160002060010154600860008760ff1660ff1681526020019081526020016000206000015442610c8a9190613205565b64174876e800610c9a91906131ab565b610ca4919061317a565b610cae91906131ab565b610cb8919061317a565b610cc29190613205565b90505b92915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8090613074565b60405180910390fd5b600060ff168260ff161415610d9d57600080fd5b6000610da98284610a19565b9050600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015481600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610e3c9190613205565b1015610e4757600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008560ff1660ff1681526020019081526020016000206001016000828254610eb39190613124565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610f0c9190613205565b925050819055508060036000828254610f259190613205565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610f89929190612f30565b602060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190612c4c565b610fe457600080fd5b8260ff168273ffffffffffffffffffffffffffffffffffffffff167f69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd58360405161102e91906130b4565b60405180910390a3505050565b60086020528060005260406000206000915090508060000154908060010154905082565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111790613074565b60405180910390fd5b604051806040016040528083815260200182815250600860008060149054906101000a900460ff1660ff1660ff1681526020019081526020016000206000820151816000015560208201518160010155905050600060149054906101000a900460ff1660ff167fc1aade57980687511ea5382b793f5b68cf97b354aef89addfbf9c59d23f1fc7283836040516111b79291906130cf565b60405180910390a26000601481819054906101000a900460ff16809291906111de90613298565b91906101000a81548160ff021916908360ff160217905550505050565b60016020528060005260406000206000915054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b64174876e80081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cf90613074565b60405180910390fd5b60008260ff161180156112ff5750600060149054906101000a900460ff1660ff168260ff16105b61130857600080fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661148b5760006113648461273a565b905080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008060ff1660ff16815260200190815260200160002060000160008282546113d29190613124565b9250508190555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461142b9190613124565b9250508190555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008060ff1660ff1681526020019081526020016000206000015410156114f457600080fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008060ff1660ff16815260200190815260200160002060000160008282546115609190613205565b9250508190555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008460ff1660ff16815260200190815260200160002060000160008282546115d39190613124565b92505081905550600060ff168373ffffffffffffffffffffffffffffffffffffffff167f69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd58360405161162591906130b4565b60405180910390a38160ff168373ffffffffffffffffffffffffffffffffffffffff167fd574b9b920ef951710b35bf90459120b667d6c810777f945e3e82996f75824c48360405161167791906130b4565b60405180910390a3505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170990613074565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611823576000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167faa482319d1110d84c35ff519b80c0449540dfbdbe6ee1daf21c2483378a1bed060405160405180910390a25b8073ffffffffffffffffffffffffffffffffffffffff167f587f8c3da67289e1b7fa2679aafa43e8ef08d5d8d9adfcb67cc825264c431c1360405160405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ee90613074565b60405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561197a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197190613034565b60405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167faa482319d1110d84c35ff519b80c0449540dfbdbe6ee1daf21c2483378a1bed060405160405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b6000600654905090565b600060ff168160ff161415611a6157600080fd5b6000611a6d3383610a19565b9050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015481600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611b009190613205565b1015611b0b57600080fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008460ff1660ff1681526020019081526020016000206001016000828254611b779190613124565b9250508190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611bd09190613205565b925050819055508060036000828254611be99190613205565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611c4d929190612f30565b602060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9f9190612c4c565b611ca857600080fd5b8160ff163373ffffffffffffffffffffffffffffffffffffffff167f69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd583604051611cf291906130b4565b60405180910390a35050565b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008381526020019081526020016000206000828254611d619190613205565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611dba9190613205565b925050819055508160066000828254611dd39190613205565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167fa131d16963736e4c641f27a7f82f2e350b5971e555ae06ae906892bbba0a093984604051611e2191906130b4565b60405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ec657506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b611f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efc90613054565b60405180910390fd5b600060149054906101000a900460ff1660ff168260ff1610611f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5390612f94565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156120ec5780600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d90612f74565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612095576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208c90613094565b60405180910390fd5b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120e49190613205565b925050819055505b6000816003546120fc9190613124565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016121579190612f15565b60206040518083038186803b15801561216f57600080fd5b505afa158015612183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a79190612c75565b6121b19190613205565b10156121f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e990612fd4565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661237257600061224e8461273a565b905080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008060ff16815260200190815260200160002060000160008282546122b99190613124565b9250508190555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546123129190613124565b9250508190555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008460ff1660ff16815260200190815260200160002060000160008282546123de9190613124565b9250508190555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546124379190613124565b9250508190555080600360008282546124509190613124565b925050819055508160ff168373ffffffffffffffffffffffffffffffffffffffff167fd574b9b920ef951710b35bf90459120b667d6c810777f945e3e82996f75824c4836040516124a191906130b4565b60405180910390a3505050565b60026020528060005260406000206000915090508060000154908060010154905082565b600060149054906101000a900460ff1681565b600081565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015482600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461257b9190613124565b1161258557600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546125d39190613124565b6125dc336106e4565b10156125e757600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546126399190613124565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600083815260200190815260200160002060008282546126a39190613124565b9250508190555081600660008282546126bc9190613124565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f9e3e33edf5dcded4adabc51b1266225d00fa41516bfcad69513fa4eca69519da8460405161270a91906130b4565b60405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612a9857600073ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146129e657600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016128da9190612f15565b60206040518083038186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a9190612c75565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016129859190612f15565b60206040518083038186803b15801561299d57600080fd5b505afa1580156129b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d59190612c75565b6129df9190613124565b9050612a9d565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401612a419190612f15565b60206040518083038186803b158015612a5957600080fd5b505afa158015612a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a919190612c75565b9050612a9d565b600090505b919050565b600081359050612ab181613506565b92915050565b600081519050612ac68161351d565b92915050565b600081359050612adb81613534565b92915050565b600081359050612af08161354b565b92915050565b600081519050612b058161354b565b92915050565b600081359050612b1a81613562565b92915050565b600060208284031215612b3257600080fd5b6000612b4084828501612aa2565b91505092915050565b60008060408385031215612b5c57600080fd5b6000612b6a85828601612aa2565b9250506020612b7b85828601612acc565b9150509250929050565b60008060408385031215612b9857600080fd5b6000612ba685828601612aa2565b9250506020612bb785828601612ae1565b9150509250929050565b60008060408385031215612bd457600080fd5b6000612be285828601612aa2565b9250506020612bf385828601612b0b565b9150509250929050565b600080600060608486031215612c1257600080fd5b6000612c2086828701612aa2565b9350506020612c3186828701612b0b565b9250506040612c4286828701612ae1565b9150509250925092565b600060208284031215612c5e57600080fd5b6000612c6c84828501612ab7565b91505092915050565b600060208284031215612c8757600080fd5b6000612c9584828501612af6565b91505092915050565b60008060408385031215612cb157600080fd5b6000612cbf85828601612ae1565b9250506020612cd085828601612acc565b9150509250929050565b60008060408385031215612ced57600080fd5b6000612cfb85828601612ae1565b9250506020612d0c85828601612ae1565b9150509250929050565b600060208284031215612d2857600080fd5b6000612d3684828501612b0b565b91505092915050565b60008060408385031215612d5257600080fd5b6000612d6085828601612b0b565b9250506020612d7185828601612aa2565b9150509250929050565b612d8481613239565b82525050565b612d938161324b565b82525050565b6000612da6601c83613113565b9150612db182613320565b602082019050919050565b6000612dc9601883613113565b9150612dd482613349565b602082019050919050565b6000612dec601283613113565b9150612df782613372565b602082019050919050565b6000612e0f601a83613113565b9150612e1a8261339b565b602082019050919050565b6000612e32602583613113565b9150612e3d826133c4565b604082019050919050565b6000612e55602683613113565b9150612e6082613413565b604082019050919050565b6000612e78601683613113565b9150612e8382613462565b602082019050919050565b6000612e9b601883613113565b9150612ea68261348b565b602082019050919050565b6000612ebe600e83613113565b9150612ec9826134b4565b602082019050919050565b6000612ee1601483613113565b9150612eec826134dd565b602082019050919050565b612f0081613281565b82525050565b612f0f8161328b565b82525050565b6000602082019050612f2a6000830184612d7b565b92915050565b6000604082019050612f456000830185612d7b565b612f526020830184612ef7565b9392505050565b6000602082019050612f6e6000830184612d8a565b92915050565b60006020820190508181036000830152612f8d81612d99565b9050919050565b60006020820190508181036000830152612fad81612dbc565b9050919050565b60006020820190508181036000830152612fcd81612ddf565b9050919050565b60006020820190508181036000830152612fed81612e02565b9050919050565b6000602082019050818103600083015261300d81612e25565b9050919050565b6000602082019050818103600083015261302d81612e48565b9050919050565b6000602082019050818103600083015261304d81612e6b565b9050919050565b6000602082019050818103600083015261306d81612e8e565b9050919050565b6000602082019050818103600083015261308d81612eb1565b9050919050565b600060208201905081810360008301526130ad81612ed4565b9050919050565b60006020820190506130c96000830184612ef7565b92915050565b60006040820190506130e46000830185612ef7565b6130f16020830184612ef7565b9392505050565b600060208201905061310d6000830184612f06565b92915050565b600082825260208201905092915050565b600061312f82613281565b915061313a83613281565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561316f5761316e6132c2565b5b828201905092915050565b600061318582613281565b915061319083613281565b9250826131a05761319f6132f1565b5b828204905092915050565b60006131b682613281565b91506131c183613281565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131fa576131f96132c2565b5b828202905092915050565b600061321082613281565b915061321b83613281565b92508282101561322e5761322d6132c2565b5b828203905092915050565b600061324482613261565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006132a38261328b565b915060ff8214156132b7576132b66132c2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f6e6f7420656e6f756768207065726d69747465642062616c616e636500000000600082015250565b7f7472616e6368655f6964206f7574206f6620626f756e64730000000000000000600082015250565b7f616d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b7f636f6e747261637420746f6b656e2062616c616e6365206c6f77000000000000600082015250565b7f636f6e74726f6c6c65722063616e6e6f74206265207065726d6974746564206960008201527f7373756572000000000000000000000000000000000000000000000000000000602082015250565b7f69737375657220616c7265616479207065726d69747465642c207265766f6b6560008201527f2066697273740000000000000000000000000000000000000000000000000000602082015250565b7f69737375657220616c7265616479207265766f6b656400000000000000000000600082015250565b7f6e6f7420636f6e74726f6c6c6572206f72206973737565720000000000000000600082015250565b7f6e6f7420636f6e74726f6c6c6572000000000000000000000000000000000000600082015250565b7f63616e6e6f7420697373756520746f2073656c66000000000000000000000000600082015250565b61350f81613239565b811461351a57600080fd5b50565b6135268161324b565b811461353157600080fd5b50565b61353d81613257565b811461354857600080fd5b50565b61355481613281565b811461355f57600080fd5b50565b61356b8161328b565b811461357657600080fd5b5056fea2646970667358221220dfb218f32c1a70950b29a1857e51c7edd8e566576947f207d16ab9bef1f0a4dc64736f6c63430008010033",
}

// VestingBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use VestingBridgeMetaData.ABI instead.
var VestingBridgeABI = VestingBridgeMetaData.ABI

// VestingBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VestingBridgeMetaData.Bin instead.
var VestingBridgeBin = VestingBridgeMetaData.Bin

// DeployVestingBridge deploys a new Ethereum contract, binding an instance of VestingBridge to it.
func DeployVestingBridge(auth *bind.TransactOpts, backend bind.ContractBackend, token_v1_address common.Address, token_v2_address common.Address, old_addresses []common.Address, new_addresses []common.Address) (common.Address, *types.Transaction, *VestingBridge, error) {
	parsed, err := VestingBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VestingBridgeBin), backend, token_v1_address, token_v2_address, old_addresses, new_addresses)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VestingBridge{VestingBridgeCaller: VestingBridgeCaller{contract: contract}, VestingBridgeTransactor: VestingBridgeTransactor{contract: contract}, VestingBridgeFilterer: VestingBridgeFilterer{contract: contract}}, nil
}

// VestingBridge is an auto generated Go binding around an Ethereum contract.
type VestingBridge struct {
	VestingBridgeCaller     // Read-only binding to the contract
	VestingBridgeTransactor // Write-only binding to the contract
	VestingBridgeFilterer   // Log filterer for contract events
}

// VestingBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type VestingBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VestingBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VestingBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VestingBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VestingBridgeSession struct {
	Contract     *VestingBridge    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VestingBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VestingBridgeCallerSession struct {
	Contract *VestingBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// VestingBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VestingBridgeTransactorSession struct {
	Contract     *VestingBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// VestingBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type VestingBridgeRaw struct {
	Contract *VestingBridge // Generic contract binding to access the raw methods on
}

// VestingBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VestingBridgeCallerRaw struct {
	Contract *VestingBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// VestingBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VestingBridgeTransactorRaw struct {
	Contract *VestingBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVestingBridge creates a new instance of VestingBridge, bound to a specific deployed contract.
func NewVestingBridge(address common.Address, backend bind.ContractBackend) (*VestingBridge, error) {
	contract, err := bindVestingBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VestingBridge{VestingBridgeCaller: VestingBridgeCaller{contract: contract}, VestingBridgeTransactor: VestingBridgeTransactor{contract: contract}, VestingBridgeFilterer: VestingBridgeFilterer{contract: contract}}, nil
}

// NewVestingBridgeCaller creates a new read-only instance of VestingBridge, bound to a specific deployed contract.
func NewVestingBridgeCaller(address common.Address, caller bind.ContractCaller) (*VestingBridgeCaller, error) {
	contract, err := bindVestingBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeCaller{contract: contract}, nil
}

// NewVestingBridgeTransactor creates a new write-only instance of VestingBridge, bound to a specific deployed contract.
func NewVestingBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*VestingBridgeTransactor, error) {
	contract, err := bindVestingBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeTransactor{contract: contract}, nil
}

// NewVestingBridgeFilterer creates a new log filterer instance of VestingBridge, bound to a specific deployed contract.
func NewVestingBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*VestingBridgeFilterer, error) {
	contract, err := bindVestingBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeFilterer{contract: contract}, nil
}

// bindVestingBridge binds a generic wrapper to an already deployed contract.
func bindVestingBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VestingBridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VestingBridge *VestingBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VestingBridge.Contract.VestingBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VestingBridge *VestingBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VestingBridge.Contract.VestingBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VestingBridge *VestingBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VestingBridge.Contract.VestingBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VestingBridge *VestingBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VestingBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VestingBridge *VestingBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VestingBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VestingBridge *VestingBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VestingBridge.Contract.contract.Transact(opts, method, params...)
}

// AccuracyScale is a free data retrieval call binding the contract method 0x903223bf.
//
// Solidity: function accuracy_scale() view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) AccuracyScale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "accuracy_scale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccuracyScale is a free data retrieval call binding the contract method 0x903223bf.
//
// Solidity: function accuracy_scale() view returns(uint256)
func (_VestingBridge *VestingBridgeSession) AccuracyScale() (*big.Int, error) {
	return _VestingBridge.Contract.AccuracyScale(&_VestingBridge.CallOpts)
}

// AccuracyScale is a free data retrieval call binding the contract method 0x903223bf.
//
// Solidity: function accuracy_scale() view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) AccuracyScale() (*big.Int, error) {
	return _VestingBridge.Contract.AccuracyScale(&_VestingBridge.CallOpts)
}

// AddressMigration is a free data retrieval call binding the contract method 0x59e7454b.
//
// Solidity: function address_migration(address ) view returns(address)
func (_VestingBridge *VestingBridgeCaller) AddressMigration(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "address_migration", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddressMigration is a free data retrieval call binding the contract method 0x59e7454b.
//
// Solidity: function address_migration(address ) view returns(address)
func (_VestingBridge *VestingBridgeSession) AddressMigration(arg0 common.Address) (common.Address, error) {
	return _VestingBridge.Contract.AddressMigration(&_VestingBridge.CallOpts, arg0)
}

// AddressMigration is a free data retrieval call binding the contract method 0x59e7454b.
//
// Solidity: function address_migration(address ) view returns(address)
func (_VestingBridge *VestingBridgeCallerSession) AddressMigration(arg0 common.Address) (common.Address, error) {
	return _VestingBridge.Contract.AddressMigration(&_VestingBridge.CallOpts, arg0)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_VestingBridge *VestingBridgeCaller) Controller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "controller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_VestingBridge *VestingBridgeSession) Controller() (common.Address, error) {
	return _VestingBridge.Contract.Controller(&_VestingBridge.CallOpts)
}

// Controller is a free data retrieval call binding the contract method 0xf77c4791.
//
// Solidity: function controller() view returns(address)
func (_VestingBridge *VestingBridgeCallerSession) Controller() (common.Address, error) {
	return _VestingBridge.Contract.Controller(&_VestingBridge.CallOpts)
}

// DefaultTrancheId is a free data retrieval call binding the contract method 0xed1cac5c.
//
// Solidity: function default_tranche_id() view returns(uint8)
func (_VestingBridge *VestingBridgeCaller) DefaultTrancheId(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "default_tranche_id")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DefaultTrancheId is a free data retrieval call binding the contract method 0xed1cac5c.
//
// Solidity: function default_tranche_id() view returns(uint8)
func (_VestingBridge *VestingBridgeSession) DefaultTrancheId() (uint8, error) {
	return _VestingBridge.Contract.DefaultTrancheId(&_VestingBridge.CallOpts)
}

// DefaultTrancheId is a free data retrieval call binding the contract method 0xed1cac5c.
//
// Solidity: function default_tranche_id() view returns(uint8)
func (_VestingBridge *VestingBridgeCallerSession) DefaultTrancheId() (uint8, error) {
	return _VestingBridge.Contract.DefaultTrancheId(&_VestingBridge.CallOpts)
}

// GetTrancheBalance is a free data retrieval call binding the contract method 0x02e8e239.
//
// Solidity: function get_tranche_balance(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) GetTrancheBalance(opts *bind.CallOpts, user common.Address, tranche_id uint8) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "get_tranche_balance", user, tranche_id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTrancheBalance is a free data retrieval call binding the contract method 0x02e8e239.
//
// Solidity: function get_tranche_balance(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeSession) GetTrancheBalance(user common.Address, tranche_id uint8) (*big.Int, error) {
	return _VestingBridge.Contract.GetTrancheBalance(&_VestingBridge.CallOpts, user, tranche_id)
}

// GetTrancheBalance is a free data retrieval call binding the contract method 0x02e8e239.
//
// Solidity: function get_tranche_balance(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) GetTrancheBalance(user common.Address, tranche_id uint8) (*big.Int, error) {
	return _VestingBridge.Contract.GetTrancheBalance(&_VestingBridge.CallOpts, user, tranche_id)
}

// GetVestedForTranche is a free data retrieval call binding the contract method 0x29f7de26.
//
// Solidity: function get_vested_for_tranche(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) GetVestedForTranche(opts *bind.CallOpts, user common.Address, tranche_id uint8) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "get_vested_for_tranche", user, tranche_id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVestedForTranche is a free data retrieval call binding the contract method 0x29f7de26.
//
// Solidity: function get_vested_for_tranche(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeSession) GetVestedForTranche(user common.Address, tranche_id uint8) (*big.Int, error) {
	return _VestingBridge.Contract.GetVestedForTranche(&_VestingBridge.CallOpts, user, tranche_id)
}

// GetVestedForTranche is a free data retrieval call binding the contract method 0x29f7de26.
//
// Solidity: function get_vested_for_tranche(address user, uint8 tranche_id) view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) GetVestedForTranche(user common.Address, tranche_id uint8) (*big.Int, error) {
	return _VestingBridge.Contract.GetVestedForTranche(&_VestingBridge.CallOpts, user, tranche_id)
}

// PermittedIssuance is a free data retrieval call binding the contract method 0xa8be47e4.
//
// Solidity: function permitted_issuance(address ) view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) PermittedIssuance(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "permitted_issuance", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PermittedIssuance is a free data retrieval call binding the contract method 0xa8be47e4.
//
// Solidity: function permitted_issuance(address ) view returns(uint256)
func (_VestingBridge *VestingBridgeSession) PermittedIssuance(arg0 common.Address) (*big.Int, error) {
	return _VestingBridge.Contract.PermittedIssuance(&_VestingBridge.CallOpts, arg0)
}

// PermittedIssuance is a free data retrieval call binding the contract method 0xa8be47e4.
//
// Solidity: function permitted_issuance(address ) view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) PermittedIssuance(arg0 common.Address) (*big.Int, error) {
	return _VestingBridge.Contract.PermittedIssuance(&_VestingBridge.CallOpts, arg0)
}

// StakeBalance is a free data retrieval call binding the contract method 0x274abf34.
//
// Solidity: function stake_balance(address target, bytes32 vega_public_key) view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) StakeBalance(opts *bind.CallOpts, target common.Address, vega_public_key [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "stake_balance", target, vega_public_key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StakeBalance is a free data retrieval call binding the contract method 0x274abf34.
//
// Solidity: function stake_balance(address target, bytes32 vega_public_key) view returns(uint256)
func (_VestingBridge *VestingBridgeSession) StakeBalance(target common.Address, vega_public_key [32]byte) (*big.Int, error) {
	return _VestingBridge.Contract.StakeBalance(&_VestingBridge.CallOpts, target, vega_public_key)
}

// StakeBalance is a free data retrieval call binding the contract method 0x274abf34.
//
// Solidity: function stake_balance(address target, bytes32 vega_public_key) view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) StakeBalance(target common.Address, vega_public_key [32]byte) (*big.Int, error) {
	return _VestingBridge.Contract.StakeBalance(&_VestingBridge.CallOpts, target, vega_public_key)
}

// StakingToken is a free data retrieval call binding the contract method 0x2dc7d74c.
//
// Solidity: function staking_token() view returns(address)
func (_VestingBridge *VestingBridgeCaller) StakingToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "staking_token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingToken is a free data retrieval call binding the contract method 0x2dc7d74c.
//
// Solidity: function staking_token() view returns(address)
func (_VestingBridge *VestingBridgeSession) StakingToken() (common.Address, error) {
	return _VestingBridge.Contract.StakingToken(&_VestingBridge.CallOpts)
}

// StakingToken is a free data retrieval call binding the contract method 0x2dc7d74c.
//
// Solidity: function staking_token() view returns(address)
func (_VestingBridge *VestingBridgeCallerSession) StakingToken() (common.Address, error) {
	return _VestingBridge.Contract.StakingToken(&_VestingBridge.CallOpts)
}

// TotalLocked is a free data retrieval call binding the contract method 0x3c48a620.
//
// Solidity: function total_locked() view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) TotalLocked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "total_locked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalLocked is a free data retrieval call binding the contract method 0x3c48a620.
//
// Solidity: function total_locked() view returns(uint256)
func (_VestingBridge *VestingBridgeSession) TotalLocked() (*big.Int, error) {
	return _VestingBridge.Contract.TotalLocked(&_VestingBridge.CallOpts)
}

// TotalLocked is a free data retrieval call binding the contract method 0x3c48a620.
//
// Solidity: function total_locked() view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) TotalLocked() (*big.Int, error) {
	return _VestingBridge.Contract.TotalLocked(&_VestingBridge.CallOpts)
}

// TotalStaked is a free data retrieval call binding the contract method 0xaf7568dd.
//
// Solidity: function total_staked() view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) TotalStaked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "total_staked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalStaked is a free data retrieval call binding the contract method 0xaf7568dd.
//
// Solidity: function total_staked() view returns(uint256)
func (_VestingBridge *VestingBridgeSession) TotalStaked() (*big.Int, error) {
	return _VestingBridge.Contract.TotalStaked(&_VestingBridge.CallOpts)
}

// TotalStaked is a free data retrieval call binding the contract method 0xaf7568dd.
//
// Solidity: function total_staked() view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) TotalStaked() (*big.Int, error) {
	return _VestingBridge.Contract.TotalStaked(&_VestingBridge.CallOpts)
}

// TrancheCount is a free data retrieval call binding the contract method 0xeb1cbd27.
//
// Solidity: function tranche_count() view returns(uint8)
func (_VestingBridge *VestingBridgeCaller) TrancheCount(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "tranche_count")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TrancheCount is a free data retrieval call binding the contract method 0xeb1cbd27.
//
// Solidity: function tranche_count() view returns(uint8)
func (_VestingBridge *VestingBridgeSession) TrancheCount() (uint8, error) {
	return _VestingBridge.Contract.TrancheCount(&_VestingBridge.CallOpts)
}

// TrancheCount is a free data retrieval call binding the contract method 0xeb1cbd27.
//
// Solidity: function tranche_count() view returns(uint8)
func (_VestingBridge *VestingBridgeCallerSession) TrancheCount() (uint8, error) {
	return _VestingBridge.Contract.TrancheCount(&_VestingBridge.CallOpts)
}

// Tranches is a free data retrieval call binding the contract method 0x572dd5a9.
//
// Solidity: function tranches(uint8 ) view returns(uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeCaller) Tranches(opts *bind.CallOpts, arg0 uint8) (struct {
	CliffStart *big.Int
	Duration   *big.Int
}, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "tranches", arg0)

	outstruct := new(struct {
		CliffStart *big.Int
		Duration   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CliffStart = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tranches is a free data retrieval call binding the contract method 0x572dd5a9.
//
// Solidity: function tranches(uint8 ) view returns(uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeSession) Tranches(arg0 uint8) (struct {
	CliffStart *big.Int
	Duration   *big.Int
}, error) {
	return _VestingBridge.Contract.Tranches(&_VestingBridge.CallOpts, arg0)
}

// Tranches is a free data retrieval call binding the contract method 0x572dd5a9.
//
// Solidity: function tranches(uint8 ) view returns(uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeCallerSession) Tranches(arg0 uint8) (struct {
	CliffStart *big.Int
	Duration   *big.Int
}, error) {
	return _VestingBridge.Contract.Tranches(&_VestingBridge.CallOpts, arg0)
}

// UserStats is a free data retrieval call binding the contract method 0xe96842ec.
//
// Solidity: function user_stats(address ) view returns(uint256 total_in_all_tranches, uint256 lien)
func (_VestingBridge *VestingBridgeCaller) UserStats(opts *bind.CallOpts, arg0 common.Address) (struct {
	TotalInAllTranches *big.Int
	Lien               *big.Int
}, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "user_stats", arg0)

	outstruct := new(struct {
		TotalInAllTranches *big.Int
		Lien               *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TotalInAllTranches = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Lien = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserStats is a free data retrieval call binding the contract method 0xe96842ec.
//
// Solidity: function user_stats(address ) view returns(uint256 total_in_all_tranches, uint256 lien)
func (_VestingBridge *VestingBridgeSession) UserStats(arg0 common.Address) (struct {
	TotalInAllTranches *big.Int
	Lien               *big.Int
}, error) {
	return _VestingBridge.Contract.UserStats(&_VestingBridge.CallOpts, arg0)
}

// UserStats is a free data retrieval call binding the contract method 0xe96842ec.
//
// Solidity: function user_stats(address ) view returns(uint256 total_in_all_tranches, uint256 lien)
func (_VestingBridge *VestingBridgeCallerSession) UserStats(arg0 common.Address) (struct {
	TotalInAllTranches *big.Int
	Lien               *big.Int
}, error) {
	return _VestingBridge.Contract.UserStats(&_VestingBridge.CallOpts, arg0)
}

// UserTotalAllTranches is a free data retrieval call binding the contract method 0x15e1a382.
//
// Solidity: function user_total_all_tranches(address user) view returns(uint256)
func (_VestingBridge *VestingBridgeCaller) UserTotalAllTranches(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "user_total_all_tranches", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserTotalAllTranches is a free data retrieval call binding the contract method 0x15e1a382.
//
// Solidity: function user_total_all_tranches(address user) view returns(uint256)
func (_VestingBridge *VestingBridgeSession) UserTotalAllTranches(user common.Address) (*big.Int, error) {
	return _VestingBridge.Contract.UserTotalAllTranches(&_VestingBridge.CallOpts, user)
}

// UserTotalAllTranches is a free data retrieval call binding the contract method 0x15e1a382.
//
// Solidity: function user_total_all_tranches(address user) view returns(uint256)
func (_VestingBridge *VestingBridgeCallerSession) UserTotalAllTranches(user common.Address) (*big.Int, error) {
	return _VestingBridge.Contract.UserTotalAllTranches(&_VestingBridge.CallOpts, user)
}

// V1Address is a free data retrieval call binding the contract method 0xa7cf676e.
//
// Solidity: function v1_address() view returns(address)
func (_VestingBridge *VestingBridgeCaller) V1Address(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "v1_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// V1Address is a free data retrieval call binding the contract method 0xa7cf676e.
//
// Solidity: function v1_address() view returns(address)
func (_VestingBridge *VestingBridgeSession) V1Address() (common.Address, error) {
	return _VestingBridge.Contract.V1Address(&_VestingBridge.CallOpts)
}

// V1Address is a free data retrieval call binding the contract method 0xa7cf676e.
//
// Solidity: function v1_address() view returns(address)
func (_VestingBridge *VestingBridgeCallerSession) V1Address() (common.Address, error) {
	return _VestingBridge.Contract.V1Address(&_VestingBridge.CallOpts)
}

// V1Migrated is a free data retrieval call binding the contract method 0x6bb7d856.
//
// Solidity: function v1_migrated(address ) view returns(bool)
func (_VestingBridge *VestingBridgeCaller) V1Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "v1_migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// V1Migrated is a free data retrieval call binding the contract method 0x6bb7d856.
//
// Solidity: function v1_migrated(address ) view returns(bool)
func (_VestingBridge *VestingBridgeSession) V1Migrated(arg0 common.Address) (bool, error) {
	return _VestingBridge.Contract.V1Migrated(&_VestingBridge.CallOpts, arg0)
}

// V1Migrated is a free data retrieval call binding the contract method 0x6bb7d856.
//
// Solidity: function v1_migrated(address ) view returns(bool)
func (_VestingBridge *VestingBridgeCallerSession) V1Migrated(arg0 common.Address) (bool, error) {
	return _VestingBridge.Contract.V1Migrated(&_VestingBridge.CallOpts, arg0)
}

// V2Address is a free data retrieval call binding the contract method 0x7d89651a.
//
// Solidity: function v2_address() view returns(address)
func (_VestingBridge *VestingBridgeCaller) V2Address(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VestingBridge.contract.Call(opts, &out, "v2_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// V2Address is a free data retrieval call binding the contract method 0x7d89651a.
//
// Solidity: function v2_address() view returns(address)
func (_VestingBridge *VestingBridgeSession) V2Address() (common.Address, error) {
	return _VestingBridge.Contract.V2Address(&_VestingBridge.CallOpts)
}

// V2Address is a free data retrieval call binding the contract method 0x7d89651a.
//
// Solidity: function v2_address() view returns(address)
func (_VestingBridge *VestingBridgeCallerSession) V2Address() (common.Address, error) {
	return _VestingBridge.Contract.V2Address(&_VestingBridge.CallOpts)
}

// AssistedWithdrawFromTranche is a paid mutator transaction binding the contract method 0x3fd60603.
//
// Solidity: function assisted_withdraw_from_tranche(uint8 tranche_id, address target) returns()
func (_VestingBridge *VestingBridgeTransactor) AssistedWithdrawFromTranche(opts *bind.TransactOpts, tranche_id uint8, target common.Address) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "assisted_withdraw_from_tranche", tranche_id, target)
}

// AssistedWithdrawFromTranche is a paid mutator transaction binding the contract method 0x3fd60603.
//
// Solidity: function assisted_withdraw_from_tranche(uint8 tranche_id, address target) returns()
func (_VestingBridge *VestingBridgeSession) AssistedWithdrawFromTranche(tranche_id uint8, target common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.AssistedWithdrawFromTranche(&_VestingBridge.TransactOpts, tranche_id, target)
}

// AssistedWithdrawFromTranche is a paid mutator transaction binding the contract method 0x3fd60603.
//
// Solidity: function assisted_withdraw_from_tranche(uint8 tranche_id, address target) returns()
func (_VestingBridge *VestingBridgeTransactorSession) AssistedWithdrawFromTranche(tranche_id uint8, target common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.AssistedWithdrawFromTranche(&_VestingBridge.TransactOpts, tranche_id, target)
}

// CreateTranche is a paid mutator transaction binding the contract method 0x66891093.
//
// Solidity: function create_tranche(uint256 cliff_start, uint256 duration) returns()
func (_VestingBridge *VestingBridgeTransactor) CreateTranche(opts *bind.TransactOpts, cliff_start *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "create_tranche", cliff_start, duration)
}

// CreateTranche is a paid mutator transaction binding the contract method 0x66891093.
//
// Solidity: function create_tranche(uint256 cliff_start, uint256 duration) returns()
func (_VestingBridge *VestingBridgeSession) CreateTranche(cliff_start *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.CreateTranche(&_VestingBridge.TransactOpts, cliff_start, duration)
}

// CreateTranche is a paid mutator transaction binding the contract method 0x66891093.
//
// Solidity: function create_tranche(uint256 cliff_start, uint256 duration) returns()
func (_VestingBridge *VestingBridgeTransactorSession) CreateTranche(cliff_start *big.Int, duration *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.CreateTranche(&_VestingBridge.TransactOpts, cliff_start, duration)
}

// IssueIntoTranche is a paid mutator transaction binding the contract method 0xe2de6e6d.
//
// Solidity: function issue_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactor) IssueIntoTranche(opts *bind.TransactOpts, user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "issue_into_tranche", user, tranche_id, amount)
}

// IssueIntoTranche is a paid mutator transaction binding the contract method 0xe2de6e6d.
//
// Solidity: function issue_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeSession) IssueIntoTranche(user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.IssueIntoTranche(&_VestingBridge.TransactOpts, user, tranche_id, amount)
}

// IssueIntoTranche is a paid mutator transaction binding the contract method 0xe2de6e6d.
//
// Solidity: function issue_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactorSession) IssueIntoTranche(user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.IssueIntoTranche(&_VestingBridge.TransactOpts, user, tranche_id, amount)
}

// MoveIntoTranche is a paid mutator transaction binding the contract method 0x912d66ff.
//
// Solidity: function move_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactor) MoveIntoTranche(opts *bind.TransactOpts, user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "move_into_tranche", user, tranche_id, amount)
}

// MoveIntoTranche is a paid mutator transaction binding the contract method 0x912d66ff.
//
// Solidity: function move_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeSession) MoveIntoTranche(user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.MoveIntoTranche(&_VestingBridge.TransactOpts, user, tranche_id, amount)
}

// MoveIntoTranche is a paid mutator transaction binding the contract method 0x912d66ff.
//
// Solidity: function move_into_tranche(address user, uint8 tranche_id, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactorSession) MoveIntoTranche(user common.Address, tranche_id uint8, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.MoveIntoTranche(&_VestingBridge.TransactOpts, user, tranche_id, amount)
}

// PermitIssuer is a paid mutator transaction binding the contract method 0x277817c7.
//
// Solidity: function permit_issuer(address issuer, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactor) PermitIssuer(opts *bind.TransactOpts, issuer common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "permit_issuer", issuer, amount)
}

// PermitIssuer is a paid mutator transaction binding the contract method 0x277817c7.
//
// Solidity: function permit_issuer(address issuer, uint256 amount) returns()
func (_VestingBridge *VestingBridgeSession) PermitIssuer(issuer common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.PermitIssuer(&_VestingBridge.TransactOpts, issuer, amount)
}

// PermitIssuer is a paid mutator transaction binding the contract method 0x277817c7.
//
// Solidity: function permit_issuer(address issuer, uint256 amount) returns()
func (_VestingBridge *VestingBridgeTransactorSession) PermitIssuer(issuer common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VestingBridge.Contract.PermitIssuer(&_VestingBridge.TransactOpts, issuer, amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0xdd01ba0b.
//
// Solidity: function remove_stake(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeTransactor) RemoveStake(opts *bind.TransactOpts, amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "remove_stake", amount, vega_public_key)
}

// RemoveStake is a paid mutator transaction binding the contract method 0xdd01ba0b.
//
// Solidity: function remove_stake(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeSession) RemoveStake(amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.Contract.RemoveStake(&_VestingBridge.TransactOpts, amount, vega_public_key)
}

// RemoveStake is a paid mutator transaction binding the contract method 0xdd01ba0b.
//
// Solidity: function remove_stake(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeTransactorSession) RemoveStake(amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.Contract.RemoveStake(&_VestingBridge.TransactOpts, amount, vega_public_key)
}

// RevokeIssuer is a paid mutator transaction binding the contract method 0x94a4ff3f.
//
// Solidity: function revoke_issuer(address issuer) returns()
func (_VestingBridge *VestingBridgeTransactor) RevokeIssuer(opts *bind.TransactOpts, issuer common.Address) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "revoke_issuer", issuer)
}

// RevokeIssuer is a paid mutator transaction binding the contract method 0x94a4ff3f.
//
// Solidity: function revoke_issuer(address issuer) returns()
func (_VestingBridge *VestingBridgeSession) RevokeIssuer(issuer common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.RevokeIssuer(&_VestingBridge.TransactOpts, issuer)
}

// RevokeIssuer is a paid mutator transaction binding the contract method 0x94a4ff3f.
//
// Solidity: function revoke_issuer(address issuer) returns()
func (_VestingBridge *VestingBridgeTransactorSession) RevokeIssuer(issuer common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.RevokeIssuer(&_VestingBridge.TransactOpts, issuer)
}

// SetController is a paid mutator transaction binding the contract method 0x91b10ffa.
//
// Solidity: function set_controller(address new_controller) returns()
func (_VestingBridge *VestingBridgeTransactor) SetController(opts *bind.TransactOpts, new_controller common.Address) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "set_controller", new_controller)
}

// SetController is a paid mutator transaction binding the contract method 0x91b10ffa.
//
// Solidity: function set_controller(address new_controller) returns()
func (_VestingBridge *VestingBridgeSession) SetController(new_controller common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.SetController(&_VestingBridge.TransactOpts, new_controller)
}

// SetController is a paid mutator transaction binding the contract method 0x91b10ffa.
//
// Solidity: function set_controller(address new_controller) returns()
func (_VestingBridge *VestingBridgeTransactorSession) SetController(new_controller common.Address) (*types.Transaction, error) {
	return _VestingBridge.Contract.SetController(&_VestingBridge.TransactOpts, new_controller)
}

// StakeTokens is a paid mutator transaction binding the contract method 0xeea70b42.
//
// Solidity: function stake_tokens(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeTransactor) StakeTokens(opts *bind.TransactOpts, amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "stake_tokens", amount, vega_public_key)
}

// StakeTokens is a paid mutator transaction binding the contract method 0xeea70b42.
//
// Solidity: function stake_tokens(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeSession) StakeTokens(amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.Contract.StakeTokens(&_VestingBridge.TransactOpts, amount, vega_public_key)
}

// StakeTokens is a paid mutator transaction binding the contract method 0xeea70b42.
//
// Solidity: function stake_tokens(uint256 amount, bytes32 vega_public_key) returns()
func (_VestingBridge *VestingBridgeTransactorSession) StakeTokens(amount *big.Int, vega_public_key [32]byte) (*types.Transaction, error) {
	return _VestingBridge.Contract.StakeTokens(&_VestingBridge.TransactOpts, amount, vega_public_key)
}

// WithdrawFromTranche is a paid mutator transaction binding the contract method 0xbc6d385d.
//
// Solidity: function withdraw_from_tranche(uint8 tranche_id) returns()
func (_VestingBridge *VestingBridgeTransactor) WithdrawFromTranche(opts *bind.TransactOpts, tranche_id uint8) (*types.Transaction, error) {
	return _VestingBridge.contract.Transact(opts, "withdraw_from_tranche", tranche_id)
}

// WithdrawFromTranche is a paid mutator transaction binding the contract method 0xbc6d385d.
//
// Solidity: function withdraw_from_tranche(uint8 tranche_id) returns()
func (_VestingBridge *VestingBridgeSession) WithdrawFromTranche(tranche_id uint8) (*types.Transaction, error) {
	return _VestingBridge.Contract.WithdrawFromTranche(&_VestingBridge.TransactOpts, tranche_id)
}

// WithdrawFromTranche is a paid mutator transaction binding the contract method 0xbc6d385d.
//
// Solidity: function withdraw_from_tranche(uint8 tranche_id) returns()
func (_VestingBridge *VestingBridgeTransactorSession) WithdrawFromTranche(tranche_id uint8) (*types.Transaction, error) {
	return _VestingBridge.Contract.WithdrawFromTranche(&_VestingBridge.TransactOpts, tranche_id)
}

// VestingBridgeControllerSetIterator is returned from FilterControllerSet and is used to iterate over the raw logs and unpacked data for ControllerSet events raised by the VestingBridge contract.
type VestingBridgeControllerSetIterator struct {
	Event *VestingBridgeControllerSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeControllerSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeControllerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeControllerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeControllerSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeControllerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeControllerSet represents a ControllerSet event raised by the VestingBridge contract.
type VestingBridgeControllerSet struct {
	NewController common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterControllerSet is a free log retrieval operation binding the contract event 0x587f8c3da67289e1b7fa2679aafa43e8ef08d5d8d9adfcb67cc825264c431c13.
//
// Solidity: event Controller_Set(address indexed new_controller)
func (_VestingBridge *VestingBridgeFilterer) FilterControllerSet(opts *bind.FilterOpts, new_controller []common.Address) (*VestingBridgeControllerSetIterator, error) {

	var new_controllerRule []interface{}
	for _, new_controllerItem := range new_controller {
		new_controllerRule = append(new_controllerRule, new_controllerItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Controller_Set", new_controllerRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeControllerSetIterator{contract: _VestingBridge.contract, event: "Controller_Set", logs: logs, sub: sub}, nil
}

// WatchControllerSet is a free log subscription operation binding the contract event 0x587f8c3da67289e1b7fa2679aafa43e8ef08d5d8d9adfcb67cc825264c431c13.
//
// Solidity: event Controller_Set(address indexed new_controller)
func (_VestingBridge *VestingBridgeFilterer) WatchControllerSet(opts *bind.WatchOpts, sink chan<- *VestingBridgeControllerSet, new_controller []common.Address) (event.Subscription, error) {

	var new_controllerRule []interface{}
	for _, new_controllerItem := range new_controller {
		new_controllerRule = append(new_controllerRule, new_controllerItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Controller_Set", new_controllerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeControllerSet)
				if err := _VestingBridge.contract.UnpackLog(event, "Controller_Set", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseControllerSet is a log parse operation binding the contract event 0x587f8c3da67289e1b7fa2679aafa43e8ef08d5d8d9adfcb67cc825264c431c13.
//
// Solidity: event Controller_Set(address indexed new_controller)
func (_VestingBridge *VestingBridgeFilterer) ParseControllerSet(log types.Log) (*VestingBridgeControllerSet, error) {
	event := new(VestingBridgeControllerSet)
	if err := _VestingBridge.contract.UnpackLog(event, "Controller_Set", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeIssuerPermittedIterator is returned from FilterIssuerPermitted and is used to iterate over the raw logs and unpacked data for IssuerPermitted events raised by the VestingBridge contract.
type VestingBridgeIssuerPermittedIterator struct {
	Event *VestingBridgeIssuerPermitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeIssuerPermittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeIssuerPermitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeIssuerPermitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeIssuerPermittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeIssuerPermittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeIssuerPermitted represents a IssuerPermitted event raised by the VestingBridge contract.
type VestingBridgeIssuerPermitted struct {
	Issuer common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuerPermitted is a free log retrieval operation binding the contract event 0xb1dde3dfc5e8df8a1ad5d278b36a91192c9106fc9ae0d1730c82455692640cd8.
//
// Solidity: event Issuer_Permitted(address indexed issuer, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) FilterIssuerPermitted(opts *bind.FilterOpts, issuer []common.Address) (*VestingBridgeIssuerPermittedIterator, error) {

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Issuer_Permitted", issuerRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeIssuerPermittedIterator{contract: _VestingBridge.contract, event: "Issuer_Permitted", logs: logs, sub: sub}, nil
}

// WatchIssuerPermitted is a free log subscription operation binding the contract event 0xb1dde3dfc5e8df8a1ad5d278b36a91192c9106fc9ae0d1730c82455692640cd8.
//
// Solidity: event Issuer_Permitted(address indexed issuer, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) WatchIssuerPermitted(opts *bind.WatchOpts, sink chan<- *VestingBridgeIssuerPermitted, issuer []common.Address) (event.Subscription, error) {

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Issuer_Permitted", issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeIssuerPermitted)
				if err := _VestingBridge.contract.UnpackLog(event, "Issuer_Permitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssuerPermitted is a log parse operation binding the contract event 0xb1dde3dfc5e8df8a1ad5d278b36a91192c9106fc9ae0d1730c82455692640cd8.
//
// Solidity: event Issuer_Permitted(address indexed issuer, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) ParseIssuerPermitted(log types.Log) (*VestingBridgeIssuerPermitted, error) {
	event := new(VestingBridgeIssuerPermitted)
	if err := _VestingBridge.contract.UnpackLog(event, "Issuer_Permitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeIssuerRevokedIterator is returned from FilterIssuerRevoked and is used to iterate over the raw logs and unpacked data for IssuerRevoked events raised by the VestingBridge contract.
type VestingBridgeIssuerRevokedIterator struct {
	Event *VestingBridgeIssuerRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeIssuerRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeIssuerRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeIssuerRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeIssuerRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeIssuerRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeIssuerRevoked represents a IssuerRevoked event raised by the VestingBridge contract.
type VestingBridgeIssuerRevoked struct {
	Issuer common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuerRevoked is a free log retrieval operation binding the contract event 0xaa482319d1110d84c35ff519b80c0449540dfbdbe6ee1daf21c2483378a1bed0.
//
// Solidity: event Issuer_Revoked(address indexed issuer)
func (_VestingBridge *VestingBridgeFilterer) FilterIssuerRevoked(opts *bind.FilterOpts, issuer []common.Address) (*VestingBridgeIssuerRevokedIterator, error) {

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Issuer_Revoked", issuerRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeIssuerRevokedIterator{contract: _VestingBridge.contract, event: "Issuer_Revoked", logs: logs, sub: sub}, nil
}

// WatchIssuerRevoked is a free log subscription operation binding the contract event 0xaa482319d1110d84c35ff519b80c0449540dfbdbe6ee1daf21c2483378a1bed0.
//
// Solidity: event Issuer_Revoked(address indexed issuer)
func (_VestingBridge *VestingBridgeFilterer) WatchIssuerRevoked(opts *bind.WatchOpts, sink chan<- *VestingBridgeIssuerRevoked, issuer []common.Address) (event.Subscription, error) {

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Issuer_Revoked", issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeIssuerRevoked)
				if err := _VestingBridge.contract.UnpackLog(event, "Issuer_Revoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssuerRevoked is a log parse operation binding the contract event 0xaa482319d1110d84c35ff519b80c0449540dfbdbe6ee1daf21c2483378a1bed0.
//
// Solidity: event Issuer_Revoked(address indexed issuer)
func (_VestingBridge *VestingBridgeFilterer) ParseIssuerRevoked(log types.Log) (*VestingBridgeIssuerRevoked, error) {
	event := new(VestingBridgeIssuerRevoked)
	if err := _VestingBridge.contract.UnpackLog(event, "Issuer_Revoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeStakeDepositedIterator is returned from FilterStakeDeposited and is used to iterate over the raw logs and unpacked data for StakeDeposited events raised by the VestingBridge contract.
type VestingBridgeStakeDepositedIterator struct {
	Event *VestingBridgeStakeDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeStakeDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeStakeDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeStakeDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeStakeDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeStakeDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeStakeDeposited represents a StakeDeposited event raised by the VestingBridge contract.
type VestingBridgeStakeDeposited struct {
	User          common.Address
	Amount        *big.Int
	VegaPublicKey [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStakeDeposited is a free log retrieval operation binding the contract event 0x9e3e33edf5dcded4adabc51b1266225d00fa41516bfcad69513fa4eca69519da.
//
// Solidity: event Stake_Deposited(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) FilterStakeDeposited(opts *bind.FilterOpts, user []common.Address, vega_public_key [][32]byte) (*VestingBridgeStakeDepositedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Stake_Deposited", userRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeStakeDepositedIterator{contract: _VestingBridge.contract, event: "Stake_Deposited", logs: logs, sub: sub}, nil
}

// WatchStakeDeposited is a free log subscription operation binding the contract event 0x9e3e33edf5dcded4adabc51b1266225d00fa41516bfcad69513fa4eca69519da.
//
// Solidity: event Stake_Deposited(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) WatchStakeDeposited(opts *bind.WatchOpts, sink chan<- *VestingBridgeStakeDeposited, user []common.Address, vega_public_key [][32]byte) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Stake_Deposited", userRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeStakeDeposited)
				if err := _VestingBridge.contract.UnpackLog(event, "Stake_Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeDeposited is a log parse operation binding the contract event 0x9e3e33edf5dcded4adabc51b1266225d00fa41516bfcad69513fa4eca69519da.
//
// Solidity: event Stake_Deposited(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) ParseStakeDeposited(log types.Log) (*VestingBridgeStakeDeposited, error) {
	event := new(VestingBridgeStakeDeposited)
	if err := _VestingBridge.contract.UnpackLog(event, "Stake_Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeStakeRemovedIterator is returned from FilterStakeRemoved and is used to iterate over the raw logs and unpacked data for StakeRemoved events raised by the VestingBridge contract.
type VestingBridgeStakeRemovedIterator struct {
	Event *VestingBridgeStakeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeStakeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeStakeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeStakeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeStakeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeStakeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeStakeRemoved represents a StakeRemoved event raised by the VestingBridge contract.
type VestingBridgeStakeRemoved struct {
	User          common.Address
	Amount        *big.Int
	VegaPublicKey [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStakeRemoved is a free log retrieval operation binding the contract event 0xa131d16963736e4c641f27a7f82f2e350b5971e555ae06ae906892bbba0a0939.
//
// Solidity: event Stake_Removed(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) FilterStakeRemoved(opts *bind.FilterOpts, user []common.Address, vega_public_key [][32]byte) (*VestingBridgeStakeRemovedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Stake_Removed", userRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeStakeRemovedIterator{contract: _VestingBridge.contract, event: "Stake_Removed", logs: logs, sub: sub}, nil
}

// WatchStakeRemoved is a free log subscription operation binding the contract event 0xa131d16963736e4c641f27a7f82f2e350b5971e555ae06ae906892bbba0a0939.
//
// Solidity: event Stake_Removed(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) WatchStakeRemoved(opts *bind.WatchOpts, sink chan<- *VestingBridgeStakeRemoved, user []common.Address, vega_public_key [][32]byte) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Stake_Removed", userRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeStakeRemoved)
				if err := _VestingBridge.contract.UnpackLog(event, "Stake_Removed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeRemoved is a log parse operation binding the contract event 0xa131d16963736e4c641f27a7f82f2e350b5971e555ae06ae906892bbba0a0939.
//
// Solidity: event Stake_Removed(address indexed user, uint256 amount, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) ParseStakeRemoved(log types.Log) (*VestingBridgeStakeRemoved, error) {
	event := new(VestingBridgeStakeRemoved)
	if err := _VestingBridge.contract.UnpackLog(event, "Stake_Removed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeStakeTransferredIterator is returned from FilterStakeTransferred and is used to iterate over the raw logs and unpacked data for StakeTransferred events raised by the VestingBridge contract.
type VestingBridgeStakeTransferredIterator struct {
	Event *VestingBridgeStakeTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeStakeTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeStakeTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeStakeTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeStakeTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeStakeTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeStakeTransferred represents a StakeTransferred event raised by the VestingBridge contract.
type VestingBridgeStakeTransferred struct {
	From          common.Address
	Amount        *big.Int
	To            common.Address
	VegaPublicKey [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStakeTransferred is a free log retrieval operation binding the contract event 0x296aca09e6f616abedcd9cd45ac378207310452b7a713289374fd1b35e2c2fbe.
//
// Solidity: event Stake_Transferred(address indexed from, uint256 amount, address indexed to, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) FilterStakeTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address, vega_public_key [][32]byte) (*VestingBridgeStakeTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Stake_Transferred", fromRule, toRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeStakeTransferredIterator{contract: _VestingBridge.contract, event: "Stake_Transferred", logs: logs, sub: sub}, nil
}

// WatchStakeTransferred is a free log subscription operation binding the contract event 0x296aca09e6f616abedcd9cd45ac378207310452b7a713289374fd1b35e2c2fbe.
//
// Solidity: event Stake_Transferred(address indexed from, uint256 amount, address indexed to, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) WatchStakeTransferred(opts *bind.WatchOpts, sink chan<- *VestingBridgeStakeTransferred, from []common.Address, to []common.Address, vega_public_key [][32]byte) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var vega_public_keyRule []interface{}
	for _, vega_public_keyItem := range vega_public_key {
		vega_public_keyRule = append(vega_public_keyRule, vega_public_keyItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Stake_Transferred", fromRule, toRule, vega_public_keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeStakeTransferred)
				if err := _VestingBridge.contract.UnpackLog(event, "Stake_Transferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeTransferred is a log parse operation binding the contract event 0x296aca09e6f616abedcd9cd45ac378207310452b7a713289374fd1b35e2c2fbe.
//
// Solidity: event Stake_Transferred(address indexed from, uint256 amount, address indexed to, bytes32 indexed vega_public_key)
func (_VestingBridge *VestingBridgeFilterer) ParseStakeTransferred(log types.Log) (*VestingBridgeStakeTransferred, error) {
	event := new(VestingBridgeStakeTransferred)
	if err := _VestingBridge.contract.UnpackLog(event, "Stake_Transferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeTrancheBalanceAddedIterator is returned from FilterTrancheBalanceAdded and is used to iterate over the raw logs and unpacked data for TrancheBalanceAdded events raised by the VestingBridge contract.
type VestingBridgeTrancheBalanceAddedIterator struct {
	Event *VestingBridgeTrancheBalanceAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeTrancheBalanceAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeTrancheBalanceAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeTrancheBalanceAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeTrancheBalanceAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeTrancheBalanceAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeTrancheBalanceAdded represents a TrancheBalanceAdded event raised by the VestingBridge contract.
type VestingBridgeTrancheBalanceAdded struct {
	User      common.Address
	TrancheId uint8
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrancheBalanceAdded is a free log retrieval operation binding the contract event 0xd574b9b920ef951710b35bf90459120b667d6c810777f945e3e82996f75824c4.
//
// Solidity: event Tranche_Balance_Added(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) FilterTrancheBalanceAdded(opts *bind.FilterOpts, user []common.Address, tranche_id []uint8) (*VestingBridgeTrancheBalanceAddedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Tranche_Balance_Added", userRule, tranche_idRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeTrancheBalanceAddedIterator{contract: _VestingBridge.contract, event: "Tranche_Balance_Added", logs: logs, sub: sub}, nil
}

// WatchTrancheBalanceAdded is a free log subscription operation binding the contract event 0xd574b9b920ef951710b35bf90459120b667d6c810777f945e3e82996f75824c4.
//
// Solidity: event Tranche_Balance_Added(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) WatchTrancheBalanceAdded(opts *bind.WatchOpts, sink chan<- *VestingBridgeTrancheBalanceAdded, user []common.Address, tranche_id []uint8) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Tranche_Balance_Added", userRule, tranche_idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeTrancheBalanceAdded)
				if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Balance_Added", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrancheBalanceAdded is a log parse operation binding the contract event 0xd574b9b920ef951710b35bf90459120b667d6c810777f945e3e82996f75824c4.
//
// Solidity: event Tranche_Balance_Added(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) ParseTrancheBalanceAdded(log types.Log) (*VestingBridgeTrancheBalanceAdded, error) {
	event := new(VestingBridgeTrancheBalanceAdded)
	if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Balance_Added", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeTrancheBalanceRemovedIterator is returned from FilterTrancheBalanceRemoved and is used to iterate over the raw logs and unpacked data for TrancheBalanceRemoved events raised by the VestingBridge contract.
type VestingBridgeTrancheBalanceRemovedIterator struct {
	Event *VestingBridgeTrancheBalanceRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeTrancheBalanceRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeTrancheBalanceRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeTrancheBalanceRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeTrancheBalanceRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeTrancheBalanceRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeTrancheBalanceRemoved represents a TrancheBalanceRemoved event raised by the VestingBridge contract.
type VestingBridgeTrancheBalanceRemoved struct {
	User      common.Address
	TrancheId uint8
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrancheBalanceRemoved is a free log retrieval operation binding the contract event 0x69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd5.
//
// Solidity: event Tranche_Balance_Removed(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) FilterTrancheBalanceRemoved(opts *bind.FilterOpts, user []common.Address, tranche_id []uint8) (*VestingBridgeTrancheBalanceRemovedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Tranche_Balance_Removed", userRule, tranche_idRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeTrancheBalanceRemovedIterator{contract: _VestingBridge.contract, event: "Tranche_Balance_Removed", logs: logs, sub: sub}, nil
}

// WatchTrancheBalanceRemoved is a free log subscription operation binding the contract event 0x69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd5.
//
// Solidity: event Tranche_Balance_Removed(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) WatchTrancheBalanceRemoved(opts *bind.WatchOpts, sink chan<- *VestingBridgeTrancheBalanceRemoved, user []common.Address, tranche_id []uint8) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Tranche_Balance_Removed", userRule, tranche_idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeTrancheBalanceRemoved)
				if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Balance_Removed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrancheBalanceRemoved is a log parse operation binding the contract event 0x69ff77f8ae4662e6d47e9ec4c054fa45e4ed9cd4d875497ea162e3cb95ee2fd5.
//
// Solidity: event Tranche_Balance_Removed(address indexed user, uint8 indexed tranche_id, uint256 amount)
func (_VestingBridge *VestingBridgeFilterer) ParseTrancheBalanceRemoved(log types.Log) (*VestingBridgeTrancheBalanceRemoved, error) {
	event := new(VestingBridgeTrancheBalanceRemoved)
	if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Balance_Removed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VestingBridgeTrancheCreatedIterator is returned from FilterTrancheCreated and is used to iterate over the raw logs and unpacked data for TrancheCreated events raised by the VestingBridge contract.
type VestingBridgeTrancheCreatedIterator struct {
	Event *VestingBridgeTrancheCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VestingBridgeTrancheCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VestingBridgeTrancheCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VestingBridgeTrancheCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VestingBridgeTrancheCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VestingBridgeTrancheCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VestingBridgeTrancheCreated represents a TrancheCreated event raised by the VestingBridge contract.
type VestingBridgeTrancheCreated struct {
	TrancheId  uint8
	CliffStart *big.Int
	Duration   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTrancheCreated is a free log retrieval operation binding the contract event 0xc1aade57980687511ea5382b793f5b68cf97b354aef89addfbf9c59d23f1fc72.
//
// Solidity: event Tranche_Created(uint8 indexed tranche_id, uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeFilterer) FilterTrancheCreated(opts *bind.FilterOpts, tranche_id []uint8) (*VestingBridgeTrancheCreatedIterator, error) {

	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.FilterLogs(opts, "Tranche_Created", tranche_idRule)
	if err != nil {
		return nil, err
	}
	return &VestingBridgeTrancheCreatedIterator{contract: _VestingBridge.contract, event: "Tranche_Created", logs: logs, sub: sub}, nil
}

// WatchTrancheCreated is a free log subscription operation binding the contract event 0xc1aade57980687511ea5382b793f5b68cf97b354aef89addfbf9c59d23f1fc72.
//
// Solidity: event Tranche_Created(uint8 indexed tranche_id, uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeFilterer) WatchTrancheCreated(opts *bind.WatchOpts, sink chan<- *VestingBridgeTrancheCreated, tranche_id []uint8) (event.Subscription, error) {

	var tranche_idRule []interface{}
	for _, tranche_idItem := range tranche_id {
		tranche_idRule = append(tranche_idRule, tranche_idItem)
	}

	logs, sub, err := _VestingBridge.contract.WatchLogs(opts, "Tranche_Created", tranche_idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VestingBridgeTrancheCreated)
				if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrancheCreated is a log parse operation binding the contract event 0xc1aade57980687511ea5382b793f5b68cf97b354aef89addfbf9c59d23f1fc72.
//
// Solidity: event Tranche_Created(uint8 indexed tranche_id, uint256 cliff_start, uint256 duration)
func (_VestingBridge *VestingBridgeFilterer) ParseTrancheCreated(log types.Log) (*VestingBridgeTrancheCreated, error) {
	event := new(VestingBridgeTrancheCreated)
	if err := _VestingBridge.contract.UnpackLog(event, "Tranche_Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
